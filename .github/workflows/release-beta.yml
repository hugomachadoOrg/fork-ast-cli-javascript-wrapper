name: Javascript Wrapper Release

on:
  workflow_call:
    inputs:
      cliTag:
        description: 'CLI tag name'
        required: false
        type: string
        default: 2.0.0-nightly
      jsTag:
        description: 'JS Wrapper tag name'
        required: false
        type: string
        default: nightly
      dev:
        description: 'Is dev build'
        required: false
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      cliTag:
        description: 'CLI tag name (ignored if not dev build)'
        required: false
      jsTag:
        description: 'Tag name (ignored if not dev build)'
        required: false
        type: string
        default: rc
      dev:
        description: 'Is dev build'
        required: false
        default: true
        type: boolean

permissions:
  id-token: write
  contents: write
  packages: write

jobs:          
  release:
    runs-on: ubuntu-latest
    steps:
    
      # CHECKOUT PROJECT
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      # GIT CONFIGURATION
      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
      # SETUP NODE
      - uses: actions/setup-node@v3.6.0
        with:
          node-version: 10
          registry-url: https://npm.pkg.github.com/
          
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        
      - name: Print npm version from package json
        run: echo ${{ steps.package-version.outputs.current-version}}
          
      # GET TAG NAME
      - name: Generate Tag name
        run: |
          if [ ${{ inputs.dev }} == true ]; then
            echo "TAG_NAME=$(npm version prerelease --preid=${{ inputs.jsTag }} --no-git-tag-version --allow-same-version)" >> $GITHUB_ENV
          else
            echo "TAG_NAME=$(npm version patch)" >> $GITHUB_ENV
          fi
          
      - name: Print next tag version
        run: |
          echo ${{env.TAG_NAME}}
          VERSION=${{env.TAG_NAME}}
          echo "VERSION_FIX=${VERSION:1}" >> $GITHUB_ENV
          
      - name: Print next tag version - FIX
        run: echo ${{env.VERSION_FIX}}
      
      - name: Get version id of existing package versions
        if: ${{ inputs.dev }} == true
        continue-on-error: true
        run: |
          RESPONSE=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/orgs/hugomachadoOrg/packages/npm/fork-ast-cli-javascript-wrapper/versions" | jq '.[]|select(.name=="${{env.VERSION_FIX}}")|.id')
          
          echo "VERSION_ID=${RESPONSE}" >> $GITHUB_ENV
          
      - name: Print VERSION_ID
        run: echo Version Id= ${{env.VERSION_ID}}
     
       # DELETE NPM PACKAGES WHICH CONTAINS NIGHTLY IN THE NAME
      - name: Delete nightly npm package
        if: inputs.dev == true && env.VERSION_ID != ''
        run: |
          curl -L -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/orgs/hugomachadoOrg/packages/npm/fork-ast-cli-javascript-wrapper/versions/${{env.VERSION_ID}}"

      # DELETE RELEASES AND TAGS WHICH CONTAINS NIGHTLY IN THE NAME
      - name: Delete nightly release and tag
        continue-on-error: true
        if: inputs.dev == true
        uses: dev-drprasad/delete-older-releases@v0.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          keep_latest: 0
          delete_tag_pattern: ${{env.TAG_NAME}}
          delete_tags: true
          
      # DOWNLOAD CLI IF IT IS A DEV VERSION AND A CLI TAG WAS PROVIDED
      - name: Download cli with tag ${{ inputs.cliTag }}
        if: inputs.dev == true && inputs.cliTag != ''
        run: |
          # Update binaries
          chmod +x ./.github/scripts/update_cli.sh
          ./.github/scripts/update_cli.sh ${{ inputs.cliTag }}
      
      # RUN NPM INSTALL AND BUILD
      - name: NPM ci and build
        run: |
          npm ci
          npm run build
          
      # PUSH TAGS IF IT IS A RELEASE
      - name: Push tag if release
        if: inputs.dev == false
        run: git push && git push --tags
          
      # PUBLISH NPM PACKAGE
      - name: Publish npm package
        run: |
          if [ ${{ inputs.dev }} == true ]; then
            npm publish --tag=${{ inputs.jsTag }}
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}

      # CREATE RELEASE
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.TAG_NAME}}
          release_name: Release ${{env.TAG_NAME}}
          body: ${{ steps.Changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ inputs.dev }}
