name: Javascript Wrapper Release

on:
  workflow_call:
    inputs:
      cliTag:
        description: 'CLI tag name'
        required: false
        type: string
        default: 2.0.0-nightly
      jsTag:
        description: 'JS Wrapper tag name'
        required: false
        type: string
        default: nightly
      dev:
        description: 'Is dev build'
        required: false
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      cliTag:
        description: 'CLI tag name (ignored if not dev build)'
        required: false
      jsTag:
        description: 'Tag name (ignored if not dev build)'
        required: false
        type: string
        default: rc
      dev:
        description: 'Is dev build'
        required: false
        default: true
        type: boolean

permissions:
  id-token: write
  contents: write
  packages: write

jobs:
  delete_nightly:
    runs-on: ubuntu-latest
    steps:
      - name: Delete nightly npm package
        if: github.event_name != 'workflow_dispatch'
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'fork-ast-cli-javascript-wrapper'
          package-type: 'npm'
          ignore-versions: '^((?!nightly).)*$'
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          
      - name: Delete nightly release and tag
        if: github.event_name != 'workflow_dispatch'
        uses: dev-drprasad/delete-older-releases@v0.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          keep_latest: 0
          delete_tag_pattern: nightly
          delete_tags: true
          
  release:
    runs-on: ubuntu-latest
    steps:
    
      # Checkout project
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      # Git configuration
      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
      # Setup node
      - uses: actions/setup-node@v3.6.0
        with:
          node-version: 10
          registry-url: https://npm.pkg.github.com/
          
      # Get tag name
      - name: Update tag version DEV
        if: inputs.dev == true
        run: echo "TAG_NAME=$(npm version prerelease --preid=${{ inputs.jsTag }} --no-git-tag-version --allow-same-version)" >> $GITHUB_ENV
    
      - name: Update tag version RELEASE
        if: inputs.dev == false
        run: echo "TAG_NAME=$(npm version patch)" >> $GITHUB_ENV
        
      - run: echo "NEW TAG= " $TAG_NAME
      
      # Download CLI if it is dev version
      - name: Download cli with tag ${{ inputs.cliTag }}
        if: inputs.dev == true && inputs.cliTag != ''
        run: |
          # Update binaries
          chmod +x ./.github/scripts/update_cli.sh
          ./.github/scripts/update_cli.sh ${{ inputs.cliTag }}
      
      - name: NPM ci and build
        run: |
          npm ci
          npm run build
          
      - name: Push tag if release
        if: inputs.dev == false
        run: git push && git push --tags
          
      # PUBLISH NPM PACKAGES
      ## RELEASE PACKAGE
      - name: Publish release package
        if: inputs.dev == false
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
      ## DEV PACKAGE  
      - name: Publish dev package
        if: inputs.dev == true
        run: npm publish --tag=${{ inputs.jsTag }}
        env:
          NODE_AUTH_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
      
      # CREATE RELEASE
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.TAG_NAME}}
          release_name: Release ${{env.TAG_NAME}}
          body: ${{ steps.Changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ inputs.dev }}
